
function memoize(fn) {
  /* Кэш будет храниться в Мапе, потому они предназначены для быстрого поиска по ключам. С объектом тут тоже можно реализовать. Доступ к нему из замыкания*/
  const cache = new Map();

  return function (...args) {
    /*Ключом в мапе будет приведенный к строке массив значений, таким образом мы гарантируем что ключи будут сравниваться по значения, а не по ссылке.*/
    const key = JSON.stringify(args);

    /* Мы проверяем мапу (кэш) на наличие данного ключа (массива аргументов) */
    const isCached = cache.has(key);

    /* Если кэширован, позвращаем значение по ключу в мапе */
    if (isCached) return cache.get(key);

    /* Если нет, то вызываем функцию, сохраняем результат */
    const result = fn(...args);

    /* Данный результат сохраняем в мапу по паре ключ (массив с аргументами): значение (результат выполнения функции) */
    cache.set(key, result);

    /* Возвращаем результат */
    return result;
  };
}

/* Проверка */

let callCount = 0;
const memoizedFn = memoize(function (a, b) {
  callCount += 1;
  return a + b;
});
memoizedFn(2, 3); // 5
memoizedFn(2, 3); // 5
console.log(callCount); // 1